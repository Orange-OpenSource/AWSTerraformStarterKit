---
variables:
  PHASE:
    value: BUILD
    options:
      - BUILD
      - DESTROY
    description: When set to DESTROY plan and delete 
  BUILD_TYPE:
    value: CHANGES
    options:
      - CHANGES
      - FORCE
      - ALL
    description: When set to CHANGES only changes are built, when set to ALL all plan are plan build
  CICD_MODE: "true"
  GIT_SUBMODULE_STRATEGY: "recursive"
  PRINT_DEBUG: "false"
  TF_PLUGIN_CACHE_DIR: .terraform.d/plugin-cache

  # Docker Image Tag
  TFLINT_IMAGE_TAG: v0.39.3
  PRECOMMIT_IMAGE_TAG: v1.74.1
  TFENV_IMAGE_TAG: latest
  DRIFTCTL_IMAGE_TAG: latest

  # NEED TO BE CHANGED FOR EACH PROJECT
  PROJECT_NAME: starterkit
  REGION: eu-central-1
  TF_VAR_assume_role: Terraform
  TF_VAR_backend_bucket_name: awsterraformstarterkit-test-454435098043
  TF_VAR_backend_bucket_region: eu-central-1
  TF_VAR_backend_dynamodb_table: awsterraformstartkit-test-lock
  TF_VAR_backend_bucket_access_role: "arn:aws:iam::454435098043:role/Terraform"
  CUSTOM_BACKEND_BUCKET_KEY: auto
 
  PLAN_BINARY_FILE: tfplan.binary
  PLAN_JSON_FILE: tfplan.json
  ACCOUNT_ID: 454435098043
  CICD_ROLE_NAME: Terraform


cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - creds.env
    - .terraform.d/plugin-cache/

stages:
  - prepare
  - quality-checks
  - drift
  - plan
  - tests
  - apply
  - delete
  - clean-cache

########################################################################################################################
# FUNCTIONS
########################################################################################################################
.aws-cli:
  before_script:
    - yum install -y jq
  image:
    name: amazon/aws-cli:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  tags:
    - aws

.aws_get_creds: &aws_get_creds
  script: |
    #!/usr/bin/env bash
    echo "Getting temporary credentials associated to assume role"
    STS_CREDS=$(aws sts assume-role --role-arn arn:aws:iam::454435098043:role/Terraform --role-session-name ${CI_COMMIT_SHA})
    AWS_ACCESS_KEY_ID=$(echo $STS_CREDS | jq -r '.Credentials.AccessKeyId')
    AWS_SECRET_ACCESS_KEY=$(echo $STS_CREDS | jq -r '.Credentials.SecretAccessKey')
    AWS_SESSION_TOKEN=$(echo $STS_CREDS | jq -r '.Credentials.SessionToken')
    echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" > creds.env
    echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> creds.env
    echo "export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> creds.env

.terraform-base: &terraform_base
  image:
    name: marmarama/tfenv:$TFENV_IMAGE_TAG
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/tfenv/bin/'
  tags:
    - aws

.terraform-trivy:
  before_script:
    - rm -rf .terraform
    - . ./creds.env
    - apk --no-cache --update  add make
  image:
    name: aquasec/trivy:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/tfenv/bin/'
  tags:
    - aws

.terraform-lint:
  image:
    name: ghcr.io/terraform-linters/tflint:${TFLINT_IMAGE_TAG}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - apk --no-cache --update  add make
  tags:
    - aws

.shelllint:
  image:
    name: pipelinecomponents/shellcheck:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - . ./creds.env
    - apk --no-cache --update  add make
  tags:
    - aws

.precommit:
  image:
    name: ghcr.io/antonbabenko/pre-commit-terraform:${PRECOMMIT_IMAGE_TAG}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  tags:
    - aws

.yamllint:
  image:
    name: pipelinecomponents/yamllint:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - apk --no-cache --update  add make
  tags:
    - aws

.terraform-terrascan:
  image:
    name: tenable/terrascan:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - . ./creds.env
  tags:
    - aws

.md_lint:
  image:
    name: pipelinecomponents/markdownlint:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/app/bin'
  before_script:
    - apk --no-cache --update  add make
    - . ./creds.env
  tags:
    - aws

########################################################################################################################
# COMMONS
########################################################################################################################
aws-creds:
  extends: .aws-cli
  stage: prepare
  <<: *aws_get_creds

terraform-prepare:
  stage: prepare
  <<: *terraform_base
  script:
  - mkdir -p $TF_PLUGIN_CACHE_DIR

########################################################################################################################
# QUALITY CHECKS
########################################################################################################################
terraform-lint:
  needs: []
  extends: .terraform-lint
  allow_failure: true
  stage: quality-checks
  script:
    - make lint

precommit:
  needs: []
  extends: .precommit
  allow_failure: true
  stage: quality-checks
  before_script:
    - apk --no-cache --update  add make
  script:
    - make precommit

terraform-format:
  needs: []
  extends: .terraform-base
  allow_failure: true
  stage: quality-checks
  script:
    - make format

terraform-terrascan:
  needs: []
  extends: .terraform-terrascan
  allow_failure: true
  stage: quality-checks
  script:
    - terrascan scan -i terraform --verbose --config-path=./.config/.terrascan_config.toml   --iac-dir=terraform/demo
md-lint:
  needs: []
  extends: .md_lint
  allow_failure: true
  stage: quality-checks
  script:
    - make markdown_lint

shell-lint:
  needs: [aws-creds]
  extends: .shelllint
  allow_failure: true
  stage: quality-checks
  script:
    - make shell_lint

yaml-lint:
  needs: []
  extends: .yamllint
  allow_failure: true
  stage: quality-checks
  script:
    - make yaml_lint

terraform-trivy:
  needs: []
  extends: .terraform-trivy
  allow_failure: true
  stage: quality-checks
  script:
    - make trivy

########################################################################################################################
# DRIFT Detection
########################################################################################################################
driftctl:
  stage: drift
  needs: [aws-creds]
  allow_failure: true
  image:
    name: snyk/driftctl:$DRIFTCTL_IMAGE_TAG
    entrypoint: [""]
  variables:
    AWS_DEFAULT_REGION: $REGION
    ROLE_TO_ASSUME: ${TF_VAR_backend_bucket_access_role}
    AWS_ROLE_SESSION_NAME: "sessiondrifctl"
  before_script:
    - . ./creds.env
    - apk add --no-cache aws-cli
    - apk add --no-cache jq
  script: |
    #!/usr/bin/env bash
    echo "Getting temporary credentials associated to assume role"
    aws sts get-caller-identity
    STS_CREDS=$(aws sts assume-role --role-arn ${ROLE_TO_ASSUME} --role-session-name ${AWS_ROLE_SESSION_NAME})
    AWS_ACCESS_KEY_ID=$(echo $STS_CREDS | jq -r '.Credentials.AccessKeyId')
    AWS_SECRET_ACCESS_KEY=$(echo $STS_CREDS | jq -r '.Credentials.SecretAccessKey')
    AWS_SESSION_TOKEN=$(echo $STS_CREDS | jq -r '.Credentials.SessionToken')
    aws sts get-caller-identity
    driftctl scan --only-managed  --from tfstate+s3://"${TF_VAR_backend_bucket_name}"/*.tfstate

########################################################################################################################
# VALIDATE
########################################################################################################################
.validate_job: &validate_job
  extends: .terraform-base
  stage: quality-checks
  needs: [aws-creds,terraform-prepare]
  allow_failure: false
  before_script:
    - . ./creds.env

validate_terraform_demo:
  <<: *validate_job
  script:
    - make init_terraform_demo
    - make validate_terraform_demo
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - terraform/demo/.terraform
  only:
    changes:
      - terraform/demo/**/*
    variables:
      - $BUILD_TYPE == "FORCE"

validate_all:
  <<: *validate_job
  script:
    - make init_all
    - make validate_all
  artifacts:
    paths:
      - ./**/tfplan.binary
      - ./**/tfplan.json
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - ./**/.terraform
  only:
    variables:
      - $BUILD_TYPE == "ALL"

########################################################################################################################
# PLAN
########################################################################################################################
.plan_job: &plan_job
  extends: .terraform-base
  stage: plan
  allow_failure: false
  before_script:
    - . ./creds.env
plan_terraform_demo:
  <<: *plan_job
  needs: [validate_terraform_demo]
  script:
    - make plan_terraform_demo
  artifacts:
    paths:
      - terraform/demo/tfplan.binary
      - terraform/demo/tfplan.json
  only:
    changes:
      - terraform/demo/**/*
    variables:
      - $BUILD_TYPE == "FORCE"

plan_all:
  <<: *plan_job
  needs: [validate_all]
  script:
    - make plan_all
  artifacts:
    paths:
      - ./**/tfplan.binary
      - ./**/tfplan.json
  only:
    variables:
      - $BUILD_TYPE == "ALL"

########################################################################################################################
# APPLY
########################################################################################################################
.apply_job: &apply_job
  extends: .terraform-base
  stage: apply
  allow_failure: false
  when: manual
  before_script:
    - . ./creds.env

apply_terraform_demo:
  <<: *apply_job
  needs: [plan_terraform_demo]
  script:
    - make apply_terraform_demo
  only:
    refs:
      - main
    changes:
      - terraform/demo/**/*

apply_all:
  <<: *apply_job
  needs: [plan_all]
  script:
    - make apply_all
  only:
    refs:
      - main
    variables:
      - $BUILD_TYPE == "ALL"

########################################################################################################################
# DELETE
########################################################################################################################
.delete_job: &delete_job
  extends: .terraform-base
  allow_failure: false
  stage: delete
  when: manual
  before_script:
    - . ./creds.env

delete_terraform_demo:
  <<: *delete_job
  needs: [plan_terraform_demo]
  script:
    - make delete_terraform_demo
  only:
    variables:
      - $PHASE == "DESTROY"
      - $BUILD_TYPE == "FORCE"
