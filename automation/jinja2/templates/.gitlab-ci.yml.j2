---
variables:
  PHASE:
    value: BUILD
    options:
      - BUILD
      - DESTROY
    description: When set to DESTROY plan and delete
  BUILD_TYPE:
    value: CHANGES
    options:
      - CHANGES
      - FORCE
      - ALL
    description: When set to CHANGES only changes are built, when set to ALL all plan are plan build
  CICD_MODE: "true"
  GIT_SUBMODULE_STRATEGY: "recursive"
  PRINT_DEBUG: "false"
  {% if  TF_TOKEN_MODULE_ACCESS %}
  {{ TF_TOKEN_MODULE_ACCESS_KEY }}: "{{ TF_TOKEN_MODULE_ACCESS_VALUE }}"
  {% endif %}
  TF_PLUGIN_CACHE_DIR: $CI_PROJECT_DIR/.terraform.d/plugin-cache
  GIT_DEPTH: "{{ environ('GIT_DEPTH') }}"
  DOCKER_REGISTRY: "{{ DOCKER_REGISTRY }}"

  # Docker Image Tag
  TFLINT_IMAGE_TAG: "{{ environ('TFLINT_IMAGE_TAG') }}"
  PRECOMMIT_IMAGE_TAG: "{{ environ('PRECOMMIT_IMAGE_TAG') }}"
  TFENV_IMAGE_TAG: "{{ environ('TFENV_IMAGE_TAG') }}"
  DRIFTCTL_IMAGE_TAG: "{{ environ('DRIFTCTL_IMAGE_TAG') }}"

  ### global variables ###
  DEFAULT_TFLINT_CONFIG: "{{ environ('DEFAULT_TFLINT_CONFIG') }}"
  DEFAULT_PRECOMMIT_CONFIG: "{{ environ('DEFAULT_PRECOMMIT_CONFIG') }}"
  DEFAULT_SHELLCHECK_CONFIG: "{{ environ('DEFAULT_SHELLCHECK_CONFIG') }}"
  DEFAULT_YAMLLINT_CONFIG: "{{ environ('DEFAULT_YAMLLINT_CONFIG') }}"
  DEFAULT_MARKDOWNLINT_CONFIG: "{{ environ('DEFAULT_MARKDOWNLINT_CONFIG') }}"
  DEFAULT_TRIVY_CONFIG: "{{ environ('DEFAULT_TRIVY_CONFIG') }}"
  DEFAULT_TERRASCAN_CONFIG: "{{ environ('DEFAULT_TERRASCAN_CONFIG') }}"
  DEFAULT_TERRAFORM_DOCS_CONFIG: "{{ environ('DEFAULT_TERRAFORM_DOCS_CONFIG') }}"

  TFENV_TERRAFORM_VERSION: "{{ environ('TFENV_TERRAFORM_VERSION') }}"
  TERRAFORM_UPGRADE_FLAG: "{{ environ('TERRAFORM_UPGRADE_FLAG') }}"

  # NEED TO BE CHANGED FOR EACH PROJECT
  PROJECT_NAME: "{{ environ('PROJECT_NAME') }}"
  REGION: "{{ environ('REGION') }}"
  TF_VAR_assume_role: "{{ environ('CICD_ROLE_NAME') }}"
  TF_VAR_backend_bucket_name: "{{ environ('TF_VAR_backend_bucket_name') }}"
  TF_VAR_backend_bucket_region: "{{ environ('REGION') }}"
  TF_VAR_backend_dynamodb_table: "{{ environ('TF_VAR_backend_dynamodb_table')}}"
  TF_VAR_backend_bucket_access_role: "{{ environ('TF_VAR_backend_bucket_access_role') or ''}}"
  {% if  CUSTOM_BACKEND_BUCKET_KEY is sameas false %}
  CUSTOM_BACKEND_BUCKET_KEY: auto
  {% endif %}
  PLAN_BINARY_FILE: "{{ environ('PLAN_BINARY_FILE') }}"
  PLAN_JSON_FILE: "{{ environ('PLAN_JSON_FILE') }}"
  ACCOUNT_ID: "{{ environ('ACCOUNT_ID') }}"
  CICD_ROLE_NAME: "{{ environ('CICD_ROLE_NAME') }}"

  {% if CUSTOM_ENV is defined %}
  {% for key, value in CUSTOM_ENV.items() %}
  {{ key }}: ${{ key }}_SECRET
  {% endfor %}
  {% endif %}

  {%- set plans_install = environ('PLAN_INSTALL_LIST').split(',') -%}
  {%- set plans_delete = environ('PLAN_DELETE_LIST').split(',') %}
  {%- set runners = CICD_RUNNER_TAGS if CICD_RUNNER_TAGS is defined else [] %}

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' # only on pull request
    - if: $CI_COMMIT_BRANCH == '{{ GIT_MAIN_BRANCH | default('main') }}' # only main branch

stages:
  - prepare
  - quality-checks
  - drift
  - init
  - plan-apply-delete
  - clean-cache

########################################################################################################################
# FUNCTIONS
########################################################################################################################

.base: &base
  {% if runners is defined and runners|length > 0 %}
  tags:
  {% for runner in runners %}
    - {{ runner }}
  {% endfor %}
  {% else %}
  tags: []
  {% endif %}

{% if  GITLAB_JOBS["aws-creds"]  %}
.aws_get_creds:
  before_script:
    - yum install -y jq
  image:
    name: amazon/aws-cli:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  {% if GITLAB_CI_AWS_AUTH_METHOD is defined and GITLAB_CI_AWS_AUTH_METHOD == 'oidc' %}
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: {% if GITLAB_CI_OIDC_TOKEN_AUDIENCE is defined %}{{GITLAB_CI_OIDC_TOKEN_AUDIENCE}}{% else %}${CI_SERVER_PROTOCOL}://${CI_SERVER_HOST}{% endif %}

  {% endif %}
  script: |
    #!/usr/bin/env bash
    echo "Getting temporary credentials associated to assume role"
    {% if (GITLAB_CI_AWS_AUTH_METHOD is defined and GITLAB_CI_AWS_AUTH_METHOD == 'role') or GITLAB_CI_AWS_AUTH_METHOD is not defined %}
    STS_CREDS=$(aws sts assume-role --role-arn arn:aws:iam::{{ environ('CICD_ACCOUNT_ID') }}:role/{{ environ('CICD_ROLE_NAME') }} --role-session-name ${CI_COMMIT_SHA})
    AWS_ACCESS_KEY_ID=$(echo $STS_CREDS | jq -r '.Credentials.AccessKeyId')
    AWS_SECRET_ACCESS_KEY=$(echo $STS_CREDS | jq -r '.Credentials.SecretAccessKey')
    AWS_SESSION_TOKEN=$(echo $STS_CREDS | jq -r '.Credentials.SessionToken')
    {% elif GITLAB_CI_AWS_AUTH_METHOD is defined and GITLAB_CI_AWS_AUTH_METHOD == 'oidc' %}
    ROLE_ARN="arn:aws:iam::{{ environ('CICD_ACCOUNT_ID') }}:role/{{ environ('CICD_ROLE_NAME') }}"
    export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
      $(aws sts assume-role-with-web-identity \
      --role-arn ${ROLE_ARN} \
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}" \
      --web-identity-token ${GITLAB_OIDC_TOKEN} \
      --duration-seconds 3600 \
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
      --output text))
    {% elif GITLAB_CI_AWS_AUTH_METHOD is defined and GITLAB_CI_AWS_AUTH_METHOD == 'accesskey' %}
    AWS_ACCESS_KEY_ID="{{ GITLAB_CI_AWS_ACCESS_KEY_ID_VARIABLE }}"
    AWS_SECRET_ACCESS_KEY="{{ GITLAB_CI_AWS_SECRET_ACCESS_KEY_VARIABLE }}"
    AWS_SESSION_TOKEN=""
    {% endif %}
    echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" > creds.env
    echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> creds.env
    echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> creds.env
    aws sts get-caller-identity
  artifacts:
    reports:
      dotenv: creds.env
  <<: *base
{% endif %}

.terraform-base: &terraform_base
  image:
    name: ${DOCKER_REGISTRY}tfenv:${TFENV_IMAGE_TAG}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/pyenv/bin:/pyenv/shims:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/tfenv/bin/'
  <<: *base

{% if  GITLAB_JOBS["terraform-trivy"]  %}
.terraform-trivy:
  before_script:
    - rm -rf .terraform
    - apk --no-cache --update  add make
  image:
    name: aquasec/trivy:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/tfenv/bin/'
  <<: *base

{% endif %}
{% if  GITLAB_JOBS["terraform-lint"]  %}
.terraform-lint:
  image:
    name: ${DOCKER_REGISTRY}tfenv:${TFENV_IMAGE_TAG}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - apk --no-cache --update  add make
  <<: *base

{% endif %}
{% if  GITLAB_JOBS["shell-lint"]  %}
.shelllint:
  image:
    name: pipelinecomponents/shellcheck:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - apk --no-cache --update  add make
  <<: *base

{% endif %}
{% if  GITLAB_JOBS["precommit"]  %}
.precommit:
  image:
    name: ghcr.io/antonbabenko/pre-commit-terraform:${PRECOMMIT_IMAGE_TAG}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  <<: *base

{% endif %}
{% if  GITLAB_JOBS["yaml-lint"]  %}
.yamllint:
  image:
    name: pipelinecomponents/yamllint:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - apk --no-cache --update  add make
  <<: *base

{% endif %}
{% if  GITLAB_JOBS["terraform-compliance"]  %}
.terraform-compliance:
  image:
    name: eerkunt/terraform-compliance:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - apt-get update && apt-get install -y make
  <<: *base

{% endif %}
{% if  GITLAB_JOBS["terraform-terrascan"]  %}
.terraform-terrascan:
  image:
    name: homebrew/brew:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/linuxbrew/.linuxbrew/bin/'
  before_script:
    - brew install make
    - brew install terrascan
  <<: *base

{% endif %}
{% if  GITLAB_JOBS["md-lint"]  %}
.md_lint:
  image:
    name: pipelinecomponents/markdownlint:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/app/bin'
  before_script:
    - apk --no-cache --update  add make
  <<: *base

{% endif %}

.init_job:
  extends: .terraform-base
  stage: init
  needs: [{% if  GITLAB_JOBS["aws-creds"]  %}"aws-creds", {% endif %}"terraform-prepare"]
  allow_failure: false

# .validate_job: &validate_job
#   extends: .terraform-base
#   stage: quality-checks
#   needs: [{% if  GITLAB_JOBS["aws-creds"]  %}"aws-creds", {% endif %}"terraform-prepare"]
#   allow_failure: false

.plan_job:
  extends: .terraform-base
  stage: plan-apply-delete
  allow_failure: false

.apply_job:
  extends: .terraform-base
  stage: plan-apply-delete
  allow_failure: false
  when: manual

.delete_job:
  extends: .terraform-base
  stage: plan-apply-delete
  allow_failure: false
  when: manual
  rules:
    - if: $PHASE == "DESTROY" && $BUILD_TYPE == "FORCE"

########################################################################################################################
# COMMONS
########################################################################################################################
{% if  GITLAB_JOBS["aws-creds"]  %}
aws-creds:
  # extends: .aws-cli
  extends: .aws_get_creds
  stage: prepare
  # <<: *aws_get_creds

{% endif %}
terraform-prepare:
  stage: prepare
  <<: *terraform_base
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - .config/
  script:
  - mkdir -p $TF_PLUGIN_CACHE_DIR
  - ./get-starter-kit.sh

########################################################################################################################
# QUALITY CHECKS
########################################################################################################################
{% if  GITLAB_JOBS["precommit"] %}
precommit:
  needs: [{% if  GITLAB_JOBS["aws-creds"] %}"aws-creds", {% endif %}"terraform-prepare"]
  extends: .precommit
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  before_script:
    - apk --no-cache --update  add make
  script:
    - make precommit

{% endif %}

{% for plan in plans %}
{% set plan_name = plan['name'] if 'name' in plan else plan %}
{% set plan_slug = plan_name | replace('/','_') %}

.rules_{{ plan_slug }}: &rules_{{ plan_slug }}
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - {{ plan_name }}/**/*
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - {{ plan_name }}/**/*
        compare_to: "refs/heads/{{ GIT_MAIN_BRANCH | default('main') }}"
    - if: $BUILD_TYPE == "FORCE"
    - when: never

{% if  GITLAB_JOBS["terraform-lint"]  %}
terraform-lint_{{ plan_slug }}:
  needs:
    - terraform-prepare
  extends: .terraform-lint
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make tflint_{{ plan_slug }}
  <<: *rules_{{ plan_slug }}

{% endif %}
{% if  GITLAB_JOBS["terraform-format"]  %}
terraform-format_{{ plan_slug }}:
  needs:
    - terraform-prepare
  extends: .terraform-base
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make format_{{ plan_slug }}
  <<: *rules_{{ plan_slug }}

{% endif %}
{% if  GITLAB_JOBS["terraform-terrascan"]  %}
terraform-terrascan_{{ plan_slug }}:
  needs:
    - terraform-prepare
  extends: .terraform-terrascan
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make terrascan_{{ plan_slug }}
  <<: *rules_{{ plan_slug }}

{% endif %}
{% if  GITLAB_JOBS["md-lint"]  %}
md-lint_{{ plan_slug }}:
  needs:
    - terraform-prepare
  extends: .md_lint
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make markdown_lint_{{ plan_slug }}
  <<: *rules_{{ plan_slug }}

{% endif %}
{% if  GITLAB_JOBS["shell-lint"]  %}
shell-lint_{{ plan_slug }}:
  needs:
    - terraform-prepare
  extends: .shelllint
  allow_failure: true
  before_script:
    - apk --no-cache --update  add make
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make shell_lint_{{ plan_slug }}
  <<: *rules_{{ plan_slug }}

{% endif %}
{% if  GITLAB_JOBS["yaml-lint"]  %}
yaml-lint_{{ plan_slug }}:
  needs:
    - terraform-prepare
  extends: .yamllint
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make yaml_lint_{{ plan_slug }}
  <<: *rules_{{ plan_slug }}

{% endif %}
{% if  GITLAB_JOBS["terraform-trivy"]  %}
terraform-trivy_{{ plan_slug }}:
  needs:
    - terraform-prepare
  extends: .terraform-trivy
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make trivy_{{ plan_slug }}
  <<: *rules_{{ plan_slug }}

{% endif %}

# ########################################################################################################################
# # VALIDATE
# ########################################################################################################################

# validate_{{ plan_slug }}:
#   extends: .validate_job
#   script:
#     - make init_{{ plan_slug }}
#     - make validate_{{ plan_slug }}
#   cache:
#     key: tf-$CI_COMMIT_REF_SLUG
#     paths:
#       - .terraform.d/plugin-cache/
#       - {{ plan_name }}/.terraform
#       - {{ plan_name }}/.terraform.lock.hcl
#   <<: *rules_{{ plan_slug }}
# {% endfor %}

{% if  GITLAB_JOBS["sonarqube"]  %}
sonarqube:
  needs: []
  image: sonarsource/sonar-scanner-cli:latest
  stage: quality-checks
  allow_failure: true
  variables:
    SONAR_USER_HOME: ${CI_PROJECT_DIR}/.sonar
    SONAR_HOST_URL: {{ SONAR_HOST_URL }}
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .sonar/cache
  script:
    - if [[ -z $SONAR_PROJECT_BASE_DIR ]] ; then SONAR_PROJECT_BASE_DIR=$PWD ; fi
    - if [[ ! -f $SONAR_PROJECT_BASE_DIR/sonar-project.properties ]] ; then echo "Error, sonar-project.properties does not exist in $SONAR_PROJECT_BASE_DIR" && exit 1 ; fi
    - export SONAR_SCANNER_OPTS="$SONAR_SCANNER_OPTS -Dsonar.projectBaseDir=$SONAR_PROJECT_BASE_DIR"
    - sonar-scanner
  tags:
  {% for runner in runners %}
    - {{ runner }}
  {% endfor %}

{% endif %}
{% if  GITLAB_JOBS["driftctl"]  %}
########################################################################################################################
# DRIFT Detection
########################################################################################################################
driftctl:
  stage: drift
  needs: [{% if  GITLAB_JOBS["aws-creds"] %}"aws-creds", {% endif %}"terraform-prepare"]
  allow_failure: true
  image:
    name: snyk/driftctl:$DRIFTCTL_IMAGE_TAG
    entrypoint: [""]
  variables:
    AWS_DEFAULT_REGION: $REGION
    ROLE_TO_ASSUME: ${TF_VAR_backend_bucket_access_role}
    AWS_ROLE_SESSION_NAME: "sessiondrifctl"
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  before_script:
    - apk add --no-cache aws-cli
    - apk add --no-cache jq
  script: |
    #!/usr/bin/env bash
    echo "Getting temporary credentials associated to assume role"
    aws sts get-caller-identity
    STS_CREDS=$(aws sts assume-role --role-arn ${ROLE_TO_ASSUME} --role-session-name ${AWS_ROLE_SESSION_NAME})
    AWS_ACCESS_KEY_ID=$(echo $STS_CREDS | jq -r '.Credentials.AccessKeyId')
    AWS_SECRET_ACCESS_KEY=$(echo $STS_CREDS | jq -r '.Credentials.SecretAccessKey')
    AWS_SESSION_TOKEN=$(echo $STS_CREDS | jq -r '.Credentials.SessionToken')
    aws sts get-caller-identity
    driftctl scan --only-managed  --from tfstate+s3://"${TF_VAR_backend_bucket_name}"/*.tfstate

{% endif %}

########################################################################################################################
# TERRAFORM INIT
########################################################################################################################
{% for plan in plans %}
{% set plan_name = plan['name'] if 'name' in plan else plan %}
{% set plan_slug = plan_name | replace('/','_') %}
init_{{ plan_slug }}:
  extends: .init_job
  script:
    - make init_{{ plan_slug }}
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - {{ plan_name }}/.terraform
      - {{ plan_name }}/.terraform.lock.hcl
  <<: *rules_{{ plan_slug }}

{% endfor %}

########################################################################################################################
# TERRAFORM PLAN
########################################################################################################################

{% for plan in plans %}
{% set plan_name = plan['name'] if 'name' in plan else plan %}
{% set plan_slug = plan_name | replace('/','_') %}
plan_{{ plan_slug }}:
  extends: .plan_job
  needs:
  {% if  GITLAB_JOBS["aws-creds"] %}
    - aws-creds
  {% endif %}
    - init_{{ plan_slug }}
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - {{ plan_name }}/.terraform
      - {{ plan_name }}/.terraform.lock.hcl
  script:
    - make init_{{ plan_slug }}
    - make plan_{{ plan_slug }}
  artifacts:
    paths:
      - {{ plan_name }}/{{ environ('PLAN_BINARY_FILE') }}
      - {{ plan_name }}/{{ environ('PLAN_JSON_FILE') }}
      {% if 'additional_gitlab_plan_artifacts' in plan %}
        {% for additional_artifact in plan['additional_gitlab_plan_artifacts'] %}
      - {{ plan_name }}/{{ additional_artifact }}
        {% endfor %}
      {% endif %}
  <<: *rules_{{ plan_slug }}

{% endfor %}

########################################################################################################################
# TERRAFORM APPLY
########################################################################################################################

{% for plan in plans %}
{% set plan_name = plan['name'] if 'name' in plan else plan %}
{% set plan_slug = plan_name | replace('/','_') %}
apply_{{ plan_slug }}:
  extends: .apply_job
  needs:
  {% if  GITLAB_JOBS["aws-creds"] %}
    - aws-creds
  {% endif %}
    - plan_{{ plan_slug }}
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - {{ plan_name }}/.terraform
      - {{ plan_name }}/.terraform.lock.hcl
  script:
    - make init_{{ plan_slug }}
    - make apply_{{ plan_slug }}
  {% if TF_APPLY_ONLY_MAIN %}
  rules:
    - if: $CI_COMMIT_BRANCH == "{{ GIT_MAIN_BRANCH | default('main') }}" && $CI_PIPELINE_SOURCE == "push"
      changes:
      - {{ plan_name }}/**/*
    - if: $CI_COMMIT_BRANCH == "{{ GIT_MAIN_BRANCH | default('main') }}" && $BUILD_TYPE == "FORCE"
    - when: never
  {% endif %}

{% endfor %}

########################################################################################################################
# DELETE
########################################################################################################################

{% set plans_delete = plans | reverse %}
{% for plan in plans_delete +%}
{% set plan_name = plan['name'] if 'name' in plan else plan %}
{% set plan_slug = plan_name | replace('/','_') %}
delete_{{ plan_slug }}:
  extends: .delete_job
  needs:
  {% if  GITLAB_JOBS["aws-creds"] %}
    - aws-creds
  {% endif %}
    - plan_{{ plan_slug }}
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - {{ plan_name }}/.terraform
      - {{ plan_name }}/.terraform.lock.hcl
  script:
    - make init_{{ plan_slug }}
    - make destroyauto_{{ plan_slug }}

{% endfor %}
