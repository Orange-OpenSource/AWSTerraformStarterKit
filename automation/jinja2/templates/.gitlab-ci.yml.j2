---
variables:
  PHASE:
    value: BUILD
    options:
      - BUILD
      - DESTROY
    description: When set to DESTROY plan and delete
  BUILD_TYPE:
    value: CHANGES
    options:
      - CHANGES
      - FORCE
      - ALL
    description: When set to CHANGES only changes are built, when set to ALL all plan are plan build
  CICD_MODE: "true"
  GIT_SUBMODULE_STRATEGY: "recursive"
  PRINT_DEBUG: "false"
  {% if  TF_TOKEN_MODULE_ACCESS %}
  {{ TF_TOKEN_MODULE_ACCESS_KEY }}: {{ TF_TOKEN_MODULE_ACCESS_VALUE }}
  {% endif %}
  TF_PLUGIN_CACHE_DIR: $CI_PROJECT_DIR/.terraform.d/plugin-cache

  # Docker Image Tag
  TFLINT_IMAGE_TAG: {{ environ('TFLINT_IMAGE_TAG') }}
  PRECOMMIT_IMAGE_TAG: {{ environ('PRECOMMIT_IMAGE_TAG') }}
  TFENV_IMAGE_TAG: {{ environ('TFENV_IMAGE_TAG') }}
  DRIFTCTL_IMAGE_TAG: {{ environ('DRIFTCTL_IMAGE_TAG') }}

  # NEED TO BE CHANGED FOR EACH PROJECT
  PROJECT_NAME: {{ environ('PROJECT_NAME') }}
  REGION: {{ environ('REGION') }}
  TF_VAR_assume_role: {{ environ('CICD_ROLE_NAME') }}
  TF_VAR_backend_bucket_name: {{ environ('TF_VAR_backend_bucket_name') }}
  TF_VAR_backend_bucket_region: {{ environ('REGION') }}
  TF_VAR_backend_dynamodb_table: {{ environ('TF_VAR_backend_dynamodb_table')}}
  TF_VAR_backend_bucket_access_role: "arn:aws:iam::{{ environ('ACCOUNT_ID') }}:role/{{ environ('CICD_ROLE_NAME') }}"
  {% if  CUSTOM_BACKEND_BUCKET_KEY is sameas false %}
  CUSTOM_BACKEND_BUCKET_KEY: auto
  {% endif %}
  PLAN_BINARY_FILE: {{ environ('PLAN_BINARY_FILE') }}
  PLAN_JSON_FILE: {{ environ('PLAN_JSON_FILE') }}
  ACCOUNT_ID: {{ environ('ACCOUNT_ID') }}
  CICD_ROLE_NAME: {{ environ('CICD_ROLE_NAME') }}

  {% if CUSTOM_ENV is defined %}
  {% for key, value in CUSTOM_ENV.items() %}
  {{ key }}: ${{ key }}_SECRET
    {% endfor %}
  {% endif %}

  {%- set plans_install = environ('PLAN_INSTALL_LIST').split(',') -%}
  {%- set plans_delete = environ('PLAN_DELETE_LIST').split(',') %}
  {%- set runners = environ('CICD_RUNNER_TAGS').split(',') %}

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' # only on pull request
    - if: $CI_COMMIT_BRANCH == '{{ GIT_MAIN_BRANCH | default('main') }}' # only main branch

stages:
  - prepare
  - quality-checks
  - drift
  - plan
  - tests
  - apply
  - delete
  - clean-cache

########################################################################################################################
# FUNCTIONS
########################################################################################################################
.aws-cli:
  before_script:
    - yum install -y jq
  image:
    name: amazon/aws-cli:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  tags:
  {% for runner in runners %}
    - {{ runner }}
   {% endfor %}

.aws_get_creds: &aws_get_creds
  script: |
    #!/usr/bin/env bash
    echo "Getting temporary credentials associated to assume role"
    STS_CREDS=$(aws sts assume-role --role-arn arn:aws:iam::{{ environ('CICD_ACCOUNT_ID') }}:role/{{ environ('CICD_ROLE_NAME') }} --role-session-name ${CI_COMMIT_SHA})
    AWS_ACCESS_KEY_ID=$(echo $STS_CREDS | jq -r '.Credentials.AccessKeyId')
    AWS_SECRET_ACCESS_KEY=$(echo $STS_CREDS | jq -r '.Credentials.SecretAccessKey')
    AWS_SESSION_TOKEN=$(echo $STS_CREDS | jq -r '.Credentials.SessionToken')
    echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" > creds.env
    echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> creds.env
    echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> creds.env
  artifacts:
    reports:
      dotenv: creds.env

.terraform-base: &terraform_base
  image:
    name: marmarama/tfenv:$TFENV_IMAGE_TAG
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/tfenv/bin/'
  tags:
  {% for runner in runners %}
    - {{ runner }}
   {% endfor %}

{% if  GITLAB_JOBS["terraform-trivy"]  %}
.terraform-trivy:
  before_script:
    - rm -rf .terraform
    - apk --no-cache --update  add make
  image:
    name: aquasec/trivy:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/tfenv/bin/'
  tags:
  {% for runner in runners %}
    - {{ runner }}
   {% endfor %}

{% endif %}
{% if  GITLAB_JOBS["terraform-lint"]  %}
.terraform-lint:
  image:
    name: ghcr.io/terraform-linters/tflint:${TFLINT_IMAGE_TAG}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - apk --no-cache --update  add make
  tags:
  {% for runner in runners %}
    - {{ runner }}
   {% endfor %}

{% endif %}
{% if  GITLAB_JOBS["shell-lint"]  %}
.shelllint:
  image:
    name: pipelinecomponents/shellcheck:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - apk --no-cache --update  add make
  tags:
  {% for runner in runners %}
    - {{ runner }}
   {% endfor %}

{% endif %}
{% if  GITLAB_JOBS["precommit"]  %}
.precommit:
  image:
    name: ghcr.io/antonbabenko/pre-commit-terraform:${PRECOMMIT_IMAGE_TAG}
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  tags:
  {% for runner in runners %}
    - {{ runner }}
   {% endfor %}

{% endif %}
{% if  GITLAB_JOBS["yaml-lint"]  %}
.yamllint:
  image:
    name: pipelinecomponents/yamllint:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - apk --no-cache --update  add make
  tags:
  {% for runner in runners %}
    - {{ runner }}
   {% endfor %}

{% endif %}
{% if  GITLAB_JOBS["terraform-compliance"]  %}
.terraform-compliance:
  image:
    name: eerkunt/terraform-compliance:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - apt-get update && apt-get install -y make
  tags:
  {% for runner in runners %}
    - {{ runner }}
   {% endfor %}

{% endif %}
{% if  GITLAB_JOBS["terraform-terrascan"]  %}
.terraform-terrascan:
  image:
    name: tenable/terrascan:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  tags:
  {% for runner in runners %}
    - {{ runner }}
   {% endfor %}

{% endif %}
{% if  GITLAB_JOBS["md-lint"]  %}
.md_lint:
  image:
    name: pipelinecomponents/markdownlint:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/app/bin'
  before_script:
    - apk --no-cache --update  add make
  tags:
  {% for runner in runners %}
    - {{ runner }}
   {% endfor %}

{% endif %}
########################################################################################################################
# COMMONS
########################################################################################################################
{% if  GITLAB_JOBS["aws-creds"]  %}
aws-creds:
  extends: .aws-cli
  stage: prepare
  <<: *aws_get_creds

{% endif %}
terraform-prepare:
  stage: prepare
  <<: *terraform_base
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - .config/
  script:
  - mkdir -p $TF_PLUGIN_CACHE_DIR
  - ./get-starter-kit.sh

########################################################################################################################
# QUALITY CHECKS
########################################################################################################################
{% if  GITLAB_JOBS["terraform-lint"]  %}
terraform-lint:
  needs:
    - terraform-prepare
  extends: .terraform-lint
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make lint

{% endif %}
{% if  GITLAB_JOBS["precommit"]  %}
precommit:
  needs:
    - aws-creds
    - terraform-prepare
  dependencies:
    - aws-creds
  extends: .precommit
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  before_script:
    - apk --no-cache --update  add make
  script:
    - make precommit

{% endif %}
{% if  GITLAB_JOBS["terraform-format"]  %}
terraform-format:
  needs:
    - terraform-prepare
  extends: .terraform-base
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make format

{% endif %}
{% if  GITLAB_JOBS["terraform-terrascan"]  %}
terraform-terrascan:
  needs:
    - aws-creds
    - terraform-prepare
  dependencies:
    - aws-creds
  extends: .terraform-terrascan
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - terrascan scan -i terraform --verbose --config-path=./.config/.terrascan_config.toml  {% for plan_name in plans_install %} --iac-dir={{ plan_name }}{% endfor %}

{% endif %}
{% if  GITLAB_JOBS["md-lint"]  %}
md-lint:
  needs:
    - aws-creds
    - terraform-prepare
  dependencies:
    - aws-creds
  extends: .md_lint
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make markdown_lint

{% endif %}
{% if  GITLAB_JOBS["shell-lint"]  %}
shell-lint:
  needs:
    - aws-creds
    - terraform-prepare
  dependencies:
    - aws-creds
  extends: .shelllint
  allow_failure: true
  before_script:
    - apk --no-cache --update  add make
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make shell_lint

{% endif %}
{% if  GITLAB_JOBS["yaml-lint"]  %}
yaml-lint:
  needs:
    - terraform-prepare
  extends: .yamllint
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make yaml_lint

{% endif %}
{% if  GITLAB_JOBS["terraform-trivy"]  %}
terraform-trivy:
  needs:
    - aws-creds
    - terraform-prepare
  dependencies:
    - aws-creds
  extends: .terraform-trivy
  allow_failure: true
  stage: quality-checks
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  script:
    - make trivy

{% endif %}

{% if  GITLAB_JOBS["sonarqube"]  %}
sonarqube:
  needs: []
  image: sonarsource/sonar-scanner-cli:latest
  stage: quality-checks
  allow_failure: true
  variables:
    SONAR_USER_HOME: ${CI_PROJECT_DIR}/.sonar
    SONAR_HOST_URL: {{ SONAR_HOST_URL }}
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .sonar/cache
  script:
    - if [[ -z $SONAR_PROJECT_BASE_DIR ]] ; then SONAR_PROJECT_BASE_DIR=$PWD ; fi
    - if [[ ! -f $SONAR_PROJECT_BASE_DIR/sonar-project.properties ]] ; then echo "Error, sonar-project.properties does not exist in $SONAR_PROJECT_BASE_DIR" && exit 1 ; fi
    - export SONAR_SCANNER_OPTS="$SONAR_SCANNER_OPTS -Dsonar.projectBaseDir=$SONAR_PROJECT_BASE_DIR"
    - sonar-scanner
  tags:
  {% for runner in runners %}
    - {{ runner }}
  {% endfor %}


{% endif %}

{% if  GITLAB_JOBS["driftctl"]  %}
########################################################################################################################
# DRIFT Detection
########################################################################################################################
driftctl:
  stage: drift
  needs:
    - aws-creds
    - terraform-prepare
  dependencies:
    - aws-creds
  allow_failure: true
  image:
    name: snyk/driftctl:$DRIFTCTL_IMAGE_TAG
    entrypoint: [""]
  variables:
    AWS_DEFAULT_REGION: $REGION
    ROLE_TO_ASSUME: ${TF_VAR_backend_bucket_access_role}
    AWS_ROLE_SESSION_NAME: "sessiondrifctl"
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .config/
  before_script:
    - apk add --no-cache aws-cli
    - apk add --no-cache jq
  script: |
    #!/usr/bin/env bash
    echo "Getting temporary credentials associated to assume role"
    aws sts get-caller-identity
    STS_CREDS=$(aws sts assume-role --role-arn ${ROLE_TO_ASSUME} --role-session-name ${AWS_ROLE_SESSION_NAME})
    AWS_ACCESS_KEY_ID=$(echo $STS_CREDS | jq -r '.Credentials.AccessKeyId')
    AWS_SECRET_ACCESS_KEY=$(echo $STS_CREDS | jq -r '.Credentials.SecretAccessKey')
    AWS_SESSION_TOKEN=$(echo $STS_CREDS | jq -r '.Credentials.SessionToken')
    aws sts get-caller-identity
    driftctl scan --only-managed  --from tfstate+s3://"${TF_VAR_backend_bucket_name}"/*.tfstate

{% endif %}
########################################################################################################################
# VALIDATE
########################################################################################################################
.validate_job: &validate_job
  extends: .terraform-base
  stage: quality-checks
  needs:
    - aws-creds
    - terraform-prepare
  dependencies:
    - aws-creds
  allow_failure: false
{% for plan_name in plans_install +%}
{% set path = plan_name.split('/') %}
{% set slug = plan_name.replace('/',"_") %}
validate_{{ slug }}:
  <<: *validate_job
  script:
    - make init_{{ slug }}
    - make validate_{{ slug }}
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - {{ plan_name }}/.terraform
      - {{ plan_name }}/.terraform.lock.hcl
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - {{ plan_name }}/**/*
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - {{ plan_name }}/**/*
        compare_to: "refs/heads/{{ GIT_MAIN_BRANCH | default('main') }}"
    - if: $BUILD_TYPE == "FORCE"
    - when: never
{% endfor %}

{% if  GITLAB_JOBS["terraform-validate"]  %}
validate_all:
  <<: *validate_job
  script:
    - make init_all
    - make validate
  artifacts:
    paths:
      - ./**/{{ environ('PLAN_BINARY_FILE') }}
      - ./**/{{ environ('PLAN_JSON_FILE') }}
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - ./**/.terraform
      - ./**/.terraform.lock.hcl
  rules:
    - if: $BUILD_TYPE == "ALL"
{% endif %}

########################################################################################################################
# PLAN
########################################################################################################################
.plan_job: &plan_job
  extends: .terraform-base
  stage: plan
  allow_failure: false
{% for plan_name in plans_install %}
{% set path = plan_name.split('/') %}
{% set slug = plan_name.replace('/',"_") %}
plan_{{ slug }}:
  <<: *plan_job
  needs:
    - aws-creds
    - job: validate_{{ slug }}
      optional: true
  dependencies:
    - aws-creds
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - {{ plan_name }}/.terraform
      - {{ plan_name }}/.terraform.lock.hcl
  script:
    - make init_{{ slug }}
    - make plan_{{ slug }}
  artifacts:
    paths:
      - {{ plan_name }}/{{ environ('PLAN_BINARY_FILE') }}
      - {{ plan_name }}/{{ environ('PLAN_JSON_FILE') }}
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
      - {{ plan_name }}/**/*
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        paths:
          - {{ plan_name }}/**/*
        compare_to: "refs/heads/{{ GIT_MAIN_BRANCH | default('main') }}"
    - if: $BUILD_TYPE == "FORCE"
    - when: never
{% endfor %}

{% if  GITLAB_JOBS["plan_all"]  %}
plan_all:
  <<: *plan_job
  needs:
    - aws-creds
    - job: validate_all
      optional: true
  dependencies:
    - aws-creds
  script:
    - make plan_all
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - ./**/.terraform
      - ./**/.terraform.lock.hcl
  artifacts:
    paths:
      - ./**/{{ environ('PLAN_BINARY_FILE') }}
      - ./**/{{ environ('PLAN_JSON_FILE') }}
  rules:
    - if: $BUILD_TYPE == "ALL"
{% endif %}

########################################################################################################################
# APPLY
########################################################################################################################
.apply_job: &apply_job
  extends: .terraform-base
  stage: apply
  allow_failure: false
  when: manual
{% for plan_name in plans_install +%}
{% set path = plan_name.split('/') %}
{% set slug = plan_name.replace('/',"_") %}
apply_{{ slug }}:
  <<: *apply_job
  needs:
    - aws-creds
    - job: plan_{{ slug }}
      optional: true
  dependencies:
    - aws-creds
    - plan_{{ slug }}
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - {{ plan_name }}/.terraform
      - {{ plan_name }}/.terraform.lock.hcl
  script:
    - make init_{{ slug }}
    - make apply_{{ slug }}
  rules:
{% if TF_APPLY_ONLY_MAIN %}
    - if: $CI_COMMIT_BRANCH == "{{ GIT_MAIN_BRANCH | default('main') }}" && $CI_PIPELINE_SOURCE == "push"
      changes:
      - {{ plan_name }}/**/*
    - if: $CI_COMMIT_BRANCH == "{{ GIT_MAIN_BRANCH | default('main') }}" && $BUILD_TYPE == "FORCE"
    - when: never
{% endif %}
{% endfor %}

{% if  GITLAB_JOBS["apply_all"]  %}
apply_all:
  <<: *apply_job
  needs:
    - aws-creds
    - job: plan_all
      optional: true
  dependencies:
    - aws-creds
    - plan_all
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - ./**/.terraform
      - ./**/.terraform.lock.hcl
  script:
    - make apply_all
{% if TF_APPLY_ONLY_MAIN %}
  rules:
    - if: $CI_COMMIT_BRANCH == "{{ GIT_MAIN_BRANCH | default('main') }}" && $BUILD_TYPE == "ALL"
{% endif %}
{% endif %}

########################################################################################################################
# DELETE
########################################################################################################################
.delete_job: &delete_job
  extends: .terraform-base
  allow_failure: false
  stage: delete
  when: manual
  rules:
    - if: $PHASE == "DESTROY" && $BUILD_TYPE == "FORCE"
{% for plan_name in plans_delete +%}
{% set path = plan_name.split('/') %}
{% set slug = plan_name.replace('/',"_") %}
delete_{{ slug }}:
  <<: *delete_job
  needs:
    - aws-creds
    - job: plan_{{ slug }}
      optional: true
  dependencies:
    - aws-creds
    - plan_{{ slug }}
  cache:
    key: tf-$CI_COMMIT_REF_SLUG
    paths:
      - .terraform.d/plugin-cache/
      - {{ plan_name }}/.terraform
      - {{ plan_name }}/.terraform.lock.hcl
  script:
    - make init_{{ slug }}
    - make destroyauto_{{ slug }}
{% endfor %}
